import jQuery from 'jquery'
import tippy from 'tippy.js';
import 'tippy.js/dist/tippy.css';
import 'tippy.js/themes/light.css';

// Generated by CoffeeScript 1.8.0
(function() {
  (function($) {
    var jQueryGuide;
    let scrollIntoView = false
    
    $.guide = function(options) {
      var action, guide, _i, _len, _ref;
      guide = new jQueryGuide();
      if (options.actions !== void 0) {
        _ref = options.actions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          action = _ref[_i];
          guide.addAction(action);
        }
      }
      guide.buildLayout();
      guide.layout.bg.click((function(_this) {
        return function() {
          return guide.next();
        };
      })(this));
      $(window).resize((function(_this) {
        return function() {
          return guide.draw();
        };
      })(this));
      $(window).scroll((function(_this) {
        return function() {
          if (scrollIntoView === true) {
            return false
          }
          return guide.draw();
        };
      })(this));
      
      $('body').addClass('jquery-guide-prevent-scroll')
      guide.execAction();
      return guide;
    };
    return jQueryGuide = (function() {
      function jQueryGuide() {
        this.layout = {
          container: '',
          bg: '',
          content: '',
          glow: null
        };
        this.step = {
          current: 0,
          status: 0
        };
        this.actionList = [];
      }

      jQueryGuide.prototype.buildLayout = function() {
        var layout, layoutId;
        layoutId = Math.round(Math.random() * 10000);
        layout = $(`<div class="jquery-guide" id="jQueryGuide` + layoutId + `">
            <div class="jquery-guide-bg"></div>
            <div class="jquery-guide-content"></div>
            <div class="jquery-guide-glow"></div>
            <div class="jquery-guide-popup ui popup transition"></div>
        </div>`);
        $('html > body').append(layout);
        this.layout.container = $('#jQueryGuide' + layoutId);
        
//        this.layout.container.on('scroll', function (event) {
//          event.preventDefault()
//          event.stopPropagation()
//        })
        
        this.layout.bg = this.layout.container.find('>.jquery-guide-bg');
        this.layout.glow = this.layout.container.find('>.jquery-guide-glow');
        this.layout.popup = this.layout.container.find('>.jquery-guide-popup');
        return this.layout.content = this.layout.container.find('>.jquery-guide-content');
      };

      jQueryGuide.prototype.addAction = function(action) {
        //if (!action.content === void 0) {
        //  this.action.content = "";
        //}
        if (action.offsetX === void 0) {
          action.offsetX = 0;
        }
        if (action.offsetY === void 0) {
          action.offsetY = 0;
        }
        if (action.isBeforeFuncExec === void 0) {
          action.isBeforeFuncExec = false;
        }
        return this.actionList.push(action);
      };

      jQueryGuide.prototype.execAction = function() {
        var action;
        //$('body').addClass('jquery-guide-prevent-scroll')
        action = this.actionList[this.step.current];
        //console.log(this.step.current)
        
        if (this.step.status === 0) {
          this.step.status = 1;
          if (action.beforeFunc !== void 0) {
            action.beforeFunc(this);
          }
          if (action.isBeforeFuncExec) {
            return;
          }
        }
        this.step.status = 2;
        
        /*
        action.element[0].scrollIntoView({
          behavior: "smooth", 
          block: "center", 
          inline: "nearest"
        })
        */
          this.animate(() => {
            
            if (action.successFunc !== void 0) {
              this.step.status = 3;
              return action.successFunc(this);
            }
            //$('body').removeClass('jquery-guide-prevent-scroll')
          });
        
      };

      jQueryGuide.prototype.back = function() {
        if (this.step.current === 0) {
          this.exit();
          return false;
        }
        this.step = {
          current: --this.step.current,
          status: 0
        };
        this.execAction();
        return true;
      };

      jQueryGuide.prototype.next = function() {
        if (this.step.current + 1 === this.actionList.length) {
          this.exit();
          return false;
        }
        this.step = {
          current: ++this.step.current,
          status: 0
        };
        this.execAction();
        return true;
      };

      jQueryGuide.prototype.exit = function() {
        $('body').removeClass('jquery-guide-prevent-scroll')
        if (typeof(glowTippy.hide) === 'function') {
          glowTippy.hide()
        }
        return this.layout.container.remove();
      };

      
      let scrollTimer
      let onScrollEvent = function() {
        if (scrollTimer) {
          clearTimeout(scrollTimer)
        }
        scrollTimer = setTimeout(() => {
          window.removeEventListener('scroll', onScrollEvent)
          animateCallback()
        }, 100)
      }

      jQueryGuide.prototype.animate = function(callback) {
        let action = this.actionList[this.step.current];
        //this.layout.glow.fadeOut('fast')
        this.layout.glow.hide()
        //console.log(action.element[0])
        scrollIntoView = true
        animateTemp = {
          action, 
          callback,
          _this: this
        }
        
        window.addEventListener('scroll', onScrollEvent)
        
        let element = action.element
        if (typeof(element.$el) === 'object') {
          element = element.$el
        }
        if (typeof(element.scrollIntoView) !== 'function'
                && typeof(element[0].scrollIntoView) === 'function') {
          element = element[0]
        }
        
        element.scrollIntoView({
          behavior: "smooth", 
          block: "center", 
          inline: "nearest"
        })
        
        //this.animateCallback(action, callback)
        scrollTimer = setTimeout(() => {
          window.removeEventListener('scroll', this.onScrollEvent)
          animateCallback()
        }, 100)
      };
      
      let animateTemp = {}
      let animateCallback = function() {
        var bgBottomWidth, bgScrollTop, bgTopWidth, scrollTop;
        let {action, callback, _this} = animateTemp
        
        //setTimeout(() => {
          
          scrollIntoView = false
          //action.element[0].scrollIntoView({
          //  behavior: 'smooth'
          //})
          scrollTop = $(window).scrollTop();
          bgScrollTop = action.element.offset().top - scrollTop;
          bgTopWidth = bgScrollTop > 0 ? bgScrollTop : 0;
          bgBottomWidth = (bgScrollTop + action.element.innerHeight()) > 0 
              ? $(window).innerHeight() - (action.element.innerHeight() + bgScrollTop) : $(window).innerHeight();

          //this.layout.bg.show()
          return _this.layout.bg.animate({
            width: action.element.innerWidth(),
            height: action.element.innerHeight() + (bgScrollTop < 0 ? bgScrollTop : 0),
            borderTopWidth: bgTopWidth,
            borderRightWidth: $(window).innerWidth() - action.element.offset().left - action.element.innerWidth() + 1,
            borderBottomWidth: bgBottomWidth,
            borderLeftWidth: action.element.offset().left
          }, (function() {
            return function() {
              setupGlowPopup(_this, action)
              
              callback()
            };
          })(this));
        //}, 500)
      }
      
      let glowTippy
      let setupGlowPopup = function (_this, action) {
        //console.log('需要新增一個div作為框架')
        _this.layout.glow.fadeIn('fast')
        _this.layout.glow.css({
          'width': action.element.innerWidth() + 'px',
          'height': action.element.innerHeight() + 'px',
          'top': action.element.offset().top,
          'left': action.element.offset().left
        })
        
        let glow = _this.layout.glow
        let tippyInited = true
        if (action.content) {
          if (glow.attr('data-tippy-content') === undefined) {
            tippyInited = false
          } 
          
          
          glow.attr('data-tippy-content', action.content)
          
          if (tippyInited === false) {
            glowTippy = tippy(_this.layout.glow[0], {
              theme: 'light',
              //hideOnClick: false
            })
          }
          
          if (action.content) {
            glowTippy.show()
          }
        }
      }

      jQueryGuide.prototype.draw = function() {
        var action, bgBottomWidth, bgScrollTop, bgTopWidth, scrollTop;
        action = this.actionList[this.step.current];
        scrollTop = $(window).scrollTop();
        bgScrollTop = action.element.offset().top - scrollTop;
        bgTopWidth = bgScrollTop > 0 ? bgScrollTop : 0;
        bgBottomWidth = (bgScrollTop + action.element.innerHeight()) > 0 ? $(window).innerHeight() - (action.element.innerHeight() + bgScrollTop) : $(window).innerHeight();
        this.layout.bg.css({
          width: action.element.innerWidth(),
          height: action.element.innerHeight() + (bgScrollTop < 0 ? bgScrollTop : 0),
          borderTopWidth: bgTopWidth,
          borderRightWidth: $(window).innerWidth() - action.element.offset().left - action.element.innerWidth(),
          borderBottomWidth: bgBottomWidth,
          borderLeftWidth: action.element.offset().left
        });
        return this.layout.content.css({
          top: action.element.offset().top + action.offsetY,
          left: action.element.offset().left + action.offsetX
        });
      };

      return jQueryGuide;

    })();
  })(jQuery);

}).call(this);
