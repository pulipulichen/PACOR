import jQuery from 'jquery'

// Generated by CoffeeScript 1.8.0
(function() {
  (function($) {
    var jQueryGuide;
    $.guide = function(options) {
      var action, guide, _i, _len, _ref;
      guide = new jQueryGuide();
      if (options.actions !== void 0) {
        _ref = options.actions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          action = _ref[_i];
          guide.addAction(action);
        }
      }
      guide.buildLayout();
      guide.layout.bg.click((function(_this) {
        return function() {
          return guide.next();
        };
      })(this));
      $(window).resize((function(_this) {
        return function() {
          return guide.draw();
        };
      })(this));
      $(window).scroll((function(_this) {
        return function() {
          return guide.draw();
        };
      })(this));
      guide.execAction();
      return guide;
    };
    return jQueryGuide = (function() {
      function jQueryGuide() {
        this.layout = {
          container: '',
          bg: '',
          content: '',
          glow: null
        };
        this.step = {
          current: 0,
          status: 0
        };
        this.actionList = [];
      }

      jQueryGuide.prototype.buildLayout = function() {
        var layout, layoutId;
        layoutId = Math.round(Math.random() * 10000);
        layout = $(`<div class="jquery-guide non-invasive-web-style-framework" id="jQueryGuide` + layoutId + `">
            <div class="jquery-guide-bg"></div>
            <div class="jquery-guide-content"></div>
            <div class="jquery-guide-glow"></div>
            <div class="jquery-guide-popup ui popup transition"></div>
        </div>`);
        $('html>body').append(layout);
        this.layout.container = $('#jQueryGuide' + layoutId);
        
//        this.layout.container.on('scroll', function (event) {
//          event.preventDefault()
//          event.stopPropagation()
//        })
        
        this.layout.bg = this.layout.container.find('>.jquery-guide-bg');
        this.layout.glow = this.layout.container.find('>.jquery-guide-glow');
        this.layout.popup = this.layout.container.find('>.jquery-guide-popup');
        return this.layout.content = this.layout.container.find('>.jquery-guide-content');
      };

      jQueryGuide.prototype.addAction = function(action) {
        //if (!action.content === void 0) {
        //  this.action.content = "";
        //}
        if (action.offsetX === void 0) {
          action.offsetX = 0;
        }
        if (action.offsetY === void 0) {
          action.offsetY = 0;
        }
        if (action.isBeforeFuncExec === void 0) {
          action.isBeforeFuncExec = false;
        }
        return this.actionList.push(action);
      };

      jQueryGuide.prototype.execAction = function() {
        var action;
        //$('body').addClass('jquery-guide-prevent-scroll')
        action = this.actionList[this.step.current];
        if (this.step.current === 0) {
          $('body').addClass('jquery-guide-prevent-scroll')
        }
        //console.log(this.step.current)
        
        if (this.step.status === 0) {
          this.step.status = 1;
          if (action.beforeFunc !== void 0) {
            action.beforeFunc(this);
          }
          if (action.isBeforeFuncExec) {
            return;
          }
        }
        this.step.status = 2;
        this.animate();
        if (action.successFunc !== void 0) {
          this.step.status = 3;
          return action.successFunc(this);
        }
        
        if (this.step.current === this.actionList.length - 1) {
          $('body').removeClass('jquery-guide-prevent-scroll')
        }
        //$('body').removeClass('jquery-guide-prevent-scroll')
      };

      jQueryGuide.prototype.back = function() {
        if (this.step.current === 0) {
          this.exit();
          return false;
        }
        this.step = {
          current: --this.step.current,
          status: 0
        };
        this.execAction();
        return true;
      };

      jQueryGuide.prototype.next = function() {
        if (this.step.current + 1 === this.actionList.length) {
          this.exit();
          return false;
        }
        this.step = {
          current: ++this.step.current,
          status: 0
        };
        this.execAction();
        return true;
      };

      jQueryGuide.prototype.exit = function() {
        return this.layout.container.remove();
      };

      jQueryGuide.prototype.animate = function() {
        var action, bgBottomWidth, bgScrollTop, bgTopWidth, scrollTop;
        action = this.actionList[this.step.current];
        //action.element[0].scrollIntoView({
        //  behavior: 'smooth'
        //})
        scrollTop = $(window).scrollTop();
        bgScrollTop = action.element.offset().top - scrollTop;
        bgTopWidth = bgScrollTop > 0 ? bgScrollTop : 0;
        bgBottomWidth = (bgScrollTop + action.element.innerHeight()) > 0 ? $(window).innerHeight() - (action.element.innerHeight() + bgScrollTop) : $(window).innerHeight();
        return this.layout.bg.animate({
          width: action.element.innerWidth(),
          height: action.element.innerHeight() + (bgScrollTop < 0 ? bgScrollTop : 0),
          borderTopWidth: bgTopWidth,
          borderRightWidth: $(window).innerWidth() - action.element.offset().left - action.element.innerWidth() + 1,
          borderBottomWidth: bgBottomWidth,
          borderLeftWidth: action.element.offset().left
        }, (function(_this) {
          return function() {
            setupGlowPopup(_this, action)
            /*
            _this.layout.content.html(action.content);
            return _this.layout.content.css({
              top: action.element.offset().top + action.offsetY,
              left: action.element.offset().left + action.offsetX
            });
            */
          };
        })(this));
      };
      
      let setupGlowPopup = function (_this, action) {
        //console.log('需要新增一個div作為框架')
        _this.layout.glow.css({
          'width': action.element.innerWidth() + 'px',
          'height': action.element.innerHeight() + 'px',
          'top': action.element.offset().top,
          'left': action.element.offset().left
        })

        let popupOptions = {
          //position : 'right center',
          //target   : '.test.image',
          //popup: _this.layout.popup,
          exclusive: true,
          closable: false,
          distanceAway: 10,
          //boundary: _this.layout.container
          //boundary: $('.jquery-guide:first')
          //prefer: 'opposite',
          //title    : 'My favorite dog',
          //content  : 'My favorite dog would like other dogs as much as themselves'
        }
        
        if (action.position) {
          popupOptions.position = action.position
        }
        
        //if (action.title) {
        //  popupOptions.title = action.title
        //}
        
        if (action.content) {
          popupOptions.title = action.content
          //_this.layout.popup.html(action.content)
        }

        _this.layout.glow.popup(popupOptions).popup('show')

      }

      jQueryGuide.prototype.draw = function() {
        var action, bgBottomWidth, bgScrollTop, bgTopWidth, scrollTop;
        action = this.actionList[this.step.current];
        scrollTop = $(window).scrollTop();
        bgScrollTop = action.element.offset().top - scrollTop;
        bgTopWidth = bgScrollTop > 0 ? bgScrollTop : 0;
        bgBottomWidth = (bgScrollTop + action.element.innerHeight()) > 0 ? $(window).innerHeight() - (action.element.innerHeight() + bgScrollTop) : $(window).innerHeight();
        this.layout.bg.css({
          width: action.element.innerWidth(),
          height: action.element.innerHeight() + (bgScrollTop < 0 ? bgScrollTop : 0),
          borderTopWidth: bgTopWidth,
          borderRightWidth: $(window).innerWidth() - action.element.offset().left - action.element.innerWidth(),
          borderBottomWidth: bgBottomWidth,
          borderLeftWidth: action.element.offset().left
        });
        return this.layout.content.css({
          top: action.element.offset().top + action.offsetY,
          left: action.element.offset().left + action.offsetX
        });
      };

      return jQueryGuide;

    })();
  })(jQuery);

}).call(this);
