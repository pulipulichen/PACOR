{"version":3,"sources":["webpack:///./webpack-app/helpers/DayJSHelper.js"],"names":[],"mappings":";;;;;;;;;;;;;AAEe;AACf;AACA,oBAAoB,0UAA4E;AAChG;;AAEA;AACA,2BAA2B,yWAAgG;AAC3H;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,2VAAyF;AAChH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,2BAA2B,EAAE;;AAE7B;AACA,4BAA4B,EAAE;AAC9B;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,C","file":"admin-components/Loading.js","sourcesContent":["\n\nexport default async () => {\n  //import dayjs from 'dayjs'\n  let dayjs = await import(/* webpackChunkName: \"client-components/GlobalComponents\" */ 'dayjs')\n  dayjs = dayjs.default\n  \n  //import relativeTime from 'dayjs/plugin/relativeTime'\n  let relativeTime = await import(/* webpackChunkName: \"client-components/GlobalComponents\" */ 'dayjs/plugin/relativeTime')\n  relativeTime = relativeTime.default\n  \n  //import 'dayjs/locale/zh-tw' // load on demand\n  dayjs.extend(relativeTime)\n\n  // preload locales\n  //require(`dayjs/locale/zh-tw`).default\n  //import 'dayjs/locale/zh-tw'\n  //import zhTWConf from 'dayjs/locale/zh-tw';\n  let zhTWConf = await import(/* webpackChunkName: \"client-components/GlobalComponents\" */ 'dayjs/locale/zh-tw')\n  zhTWConf = zhTWConf.default\n  \n  dayjs.locale(zhTWConf)\n\n  let DayJSHelper = {\n    $t: null,\n    setI18N: function ($t) {\n      this.$t = $t\n    },\n    time: function () {\n      let d = (new Date())\n      return d.getTime() + this.offset()\n    },\n    _offset: null,\n    offset () {\n      if (typeof(this._offset) !== 'number') {\n        let d = (new Date())\n        this._offset = d.getTimezoneOffset() * 60 * 1000\n      }\n      return this._offset\n    },\n    setLocale: function (dayjsLocale) {\n      if (typeof(dayjsLocale) !== 'string') {\n        return this\n      }\n\n      dayjsLocale = dayjsLocale.toLowerCase()\n\n      try {\n        //require(`dayjs/locale/${dayjsLocale}`).default // load on demand\n        dayjs.locale(dayjsLocale)\n      }\n      catch (e) {\n        console.error(`dayjs locale is error: ${dayjsLocale}`)\n      }\n      return this\n    },\n    fromNow: function (timestamp) {\n      if (timestamp === null \n              || isNaN(timestamp) === true) {\n        return ''\n      }\n      else if (typeof(timestamp) === 'string') {\n        timestamp = parseInt(timestamp, 10)\n      }\n      timestamp = timestamp - this.offset()\n      return dayjs(timestamp).fromNow()\n    },\n    toNow: function (timestamp) {\n      if (timestamp === null \n              || isNaN(timestamp) === true) {\n        return ''\n      }\n      else if (typeof(timestamp) === 'string') {\n        timestamp = parseInt(timestamp, 10)\n      }\n      timestamp = timestamp - this.offset()\n      return dayjs(timestamp).toNow()\n    },\n    _prefixZero: function (n) {\n      if (n < 10) {\n        return '0' + n\n      }\n      else {\n        return n\n      }\n    },\n    shortTime: function (millisecond) {\n      //let intervalTimestamp = (new Date()).getTime() - timestamp\n      millisecond = millisecond - this.offset()\n\n      let year = 0\n      let month = 0\n      let day = 0\n      let hour = 0\n      let minute = 0\n\n      if (millisecond < 60000) {\n        // 如果是在距離現在12小時內，那就顯示 n分鐘前\n        return this.$t('in a minute')\n      }\n      else if (millisecond < 86400000) {\n        // 如果是距離現在1天內，那就顯示 hh:mm\n        hour = Math.floor(millisecond / 3600000)\n        minute = Math.floor((millisecond % 3600000) / 60000)\n        return this._prefixZero(hour) + ':' + this._prefixZero(minute)\n\n        //return dayjs().millisecond(timestamp).format('HH:mm')\n        //return this.$t('in a day')\n      }\n      else if (millisecond < 2592000000) {\n        // 如果距離30天內，那就顯示 in {0} day\n        day = Math.ceil(millisecond / 86400000)\n        return this.$t('in {0} day', [day])\n      }\n      else if (millisecond < 31536000000) {\n        // 如果距離現在1年內，那就顯示 in {0} month\n        //return dayjs().millisecond(millisecond).format('MM-DD')\n        month = Math.ceil(millisecond / 2592000000)\n        return this.$t('in {0} month', [month])\n      }\n      else {\n        // 如果超過1年，那就顯示 in {0} year\n\n        year = Math.ceil(millisecond / 31536000000)\n        return this.$t('in {0} year', [year])\n      }\n    },\n    from: function (baseTimestamp, toTimestamp) {\n      return dayjs(baseTimestamp).from(dayjs(toTimestamp))\n    },\n    to: function (baseTimestamp, toTimestamp) {\n      return dayjs(baseTimestamp).to(dayjs(toTimestamp))\n    },\n    format: function (unixMS) {\n      unixMS = unixMS - this.offset()\n      return dayjs(unixMS).format('YYYY-MM-DD HH:mm:ss')\n    },\n    formatMMSS: function (unixMS) {\n      unixMS = unixMS - this.offset()\n      return dayjs(unixMS).format('mm:ss')\n    },\n    formatHHMMSS: function (seconds) {\n      if (typeof(seconds) !== 'number') {\n        return seconds\n      }\n      if (seconds < 60) {\n        seconds = parseInt(seconds * 100) / 100\n        return seconds\n      }\n      else if (seconds < 3600) {\n        let mm = Math.floor(seconds / 60)\n        let ss = seconds % 60\n        ss = parseInt(ss * 100) / 100\n        return this._prefixZero(mm) \n                + ':' \n                + this._prefixZero(ss) \n      }\n      else {\n        let hh = Math.floor(seconds / 3600)\n        let mm = Math.floor((seconds % 3600) / 60)\n        let ss = seconds % 60\n        ss = parseInt(ss * 100) / 100\n        //console.log(hh,mm,ss)\n        return this._prefixZero(hh) \n                + ':' \n                + this._prefixZero(mm) \n                + ':' \n                + this._prefixZero(ss) \n      }\n    }\n  }\n  \n  return DayJSHelper\n}"],"sourceRoot":""}